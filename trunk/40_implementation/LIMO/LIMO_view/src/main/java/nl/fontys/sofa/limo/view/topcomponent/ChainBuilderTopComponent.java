package nl.fontys.sofa.limo.view.topcomponent;

import java.awt.BorderLayout;
import javax.swing.JScrollPane;
import nl.fontys.sofa.limo.api.exception.ServiceNotFoundException;
import nl.fontys.sofa.limo.view.custom.pane.ChainScene;
import nl.fontys.sofa.limo.view.custom.pane.GraphSceneImpl;
import nl.fontys.sofa.limo.view.factory.ChainPaletteFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.graph.GraphScene;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays a GraphScene and Palette to build a chain with.
 */
@ConvertAsProperties(
		dtd = "-//nl.fontys.sofa.limo.view.topcomponent//ChainBuilder//EN",
		autostore = false
)
@TopComponent.Description(
		preferredID = "ChainBuilderTopComponent",
		//iconBase="SET/PATH/TO/ICON/HERE", 
		persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "nl.fontys.sofa.limo.view.topcomponent.ChainBuilderTopComponent")
@ActionReference(path = "Menu/Chain" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
		displayName = "#CTL_ChainBuilderAction"
)
@Messages({
	"CTL_ChainBuilderAction=New Chain",
	"CTL_ChainBuilderTopComponent=ChainBuilder Window",
	"HINT_ChainBuilderTopComponent=Build a chain"
})
public final class ChainBuilderTopComponent extends TopComponent {

	public ChainBuilderTopComponent() {
		initComponents();
		initCustomComponents();
		setName(Bundle.CTL_ChainBuilderTopComponent());
		setToolTipText(Bundle.HINT_ChainBuilderTopComponent());
		try {
			associateLookup(Lookups.singleton(ChainPaletteFactory.createPalette() ));
		} catch (ServiceNotFoundException ex) {
			Exceptions.printStackTrace(ex);
			NotifyDescriptor d = new NotifyDescriptor.Message("Limo encountered "
					+ "a problem. Please contact "
					+ "your administrator...",
					NotifyDescriptor.ERROR_MESSAGE);
		}
	}

	private void initCustomComponents() {
		setLayout(new BorderLayout());
		GraphScene scene = new GraphSceneImpl();
		JScrollPane shapePane = new JScrollPane();
		shapePane.setViewportView(scene.createView());
		add(shapePane, BorderLayout.CENTER);
		add(scene.createSatelliteView(), BorderLayout.WEST);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

}
